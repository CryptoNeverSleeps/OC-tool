#!/bin/bash

shopt -s extglob
BASE_DIR=`pwd`

args=`getopt huvAX $*`
if [ "$?" != "0" ]; then
	echo -e `cat $BASE_DIR/Docs/usage.txt`
	exit 0
fi

set -e
RES_DIR="$BASE_DIR/resources"
BASE_TOOLS="unbuilt"; UPDATE="false"
LOGFILE="tool.log"
RED='\033[0;31m'; YELLOW='\033[1;33m'; GREEN='\033[0;32m'
NC='\033[0m' # No Color
VER="0.1"
BUILD_ALL="false"
REMOVE_ALL="false"

set -- $args
for i
do
	case "$i"
	in
	-h)
		echo -e `cat $BASE_DIR/Docs/usage.txt`
		exit 0;;
	-u)
		UPDATE="true"
		shift;;
	-v)
		echo -e "OpenCore-tool version $VER"
		exit 0;;
	-A)
		BUILD_ALL="true"
		shift;;
	-X)
		echo -e -n "Deleting $BASE_DIR/resources ... "
		rm -rf $BASE_DIR/resources	
		echo -e "${GREEN}done${NC}"
		REMOVE_ALL="true"
		shift;;
	--)
		shift; break;;
	esac
done
ARG1=$1; ARG2=$2

print_resources() {
	for (( i = 0; i < ${#res_list[@]} ; i+=4 )); do
		echo -e "${res_list[i]}\t${res_list[i+1]}\t${res_list[i+2]}\t${res_list[i+3]}" >$(tty)
	done
}

msg() {
	echo -e -n "$1" >$(tty)
}

fin() {
	echo -e "${GREEN}done${NC}" >$(tty)
}

set_up_dest_dir() {
	if [ -d "$BUILD_DIR" ]; then
		msg "Removing old $BUILD_DIR ... "
		rm -rf $BUILD_DIR; fin
	fi
	msg "Creating new $BUILD_DIR ... "
	mkdir -p $BUILD_DIR/BOOT
	mkdir -p $BUILD_DIR/OC
	fin
}


init_res_list() {
	res_list=( \
		"base" "https://github.com/acidanthera/EfiPkg" "" "" \
		"base" "https://github.com/acidanthera/MacInfoPkg" "" "" \
		"base" "https://github.com/acidanthera/OcSupportPkg" "" "" \
		"BOOTx64.efi" "https://github.com/acidanthera/OpenCorePkg" "" "BOOT" \
		"OpenCore.efi" "https://github.com/acidanthera/OpenCorePkg" "" "OC" \
		"config.plist" "" "$BASE_DIR/$AUDK_CONFIG" "OC"
		)
	}

clone() {
	pkg_name=`echo $1|rev|cut -f 1 -d /|cut -f 1 -d " "|rev`
	if [ ! -d "$pkg_name" ]; then
		msg "Cloning $1 ... "
		git clone $1; fin
		echo "new" > $pkg_name/gitStatDEBUG
		echo "new" > $pkg_name/gitStatRELEASE
	fi
}

missing() {
	msg "\n${RED}ERROR:${NC} $1 not found, install it to continue\n"
	exit 1
}

check_requirements() {
	msg "\nChecking if required tools and files exist ..."
	if [ ! -f "$BASE_DIR/$CONFIG_PLIST" ]; then
		msg "\n${RED}ERROR: ${NC}$BASE_DIR/$CONFIG_PLIST does not exist\n\nPlease create this file and run the tool again.\n"
		exit 1
	fi
	which xcodebuild||missing "xcodebuild"
	which nasm||missing "nasm"
	which mtoc||missing "mtoc"
	which git||missing "git"
	fin
}

check_for_updates() {
	if [ "$UPDATE" == "true" ]; then
		if [ "$ARG2" = "" ]; then
			msg "\nChecking for updates ... \n"
		else
			msg "\nChecking for updates ... "
		fi
		cd $BASE_DIR
		find . -maxdepth 4 -name .git -type d|rev|cut -c 6-|rev|xargs -I {} git -C {} pull
		fin
	fi
}

build_shell_tool() {
	if [ ! -d "$BASE_DIR/resources" ]; then
		mkdir $BASE_DIR/resources
	fi
	cd $BASE_DIR/resources
	clone "https://github.com/acidanthera/OpenCoreShell"
	cd OpenCoreShell
	if [ ! -d "UDK" ]; then
		msg "Cloning UDK2018 ... "
		git clone https://github.com/tianocore/edk2 -b UDK2018 --depth=1 UDK
		fin
	fi
	cd UDK
	msg "Making UDK2018 BaseTools ... "
	unset WORKSPACE
	unset EDK_TOOLS_PATH
	source edksetup.sh --reconfig
	make -C BaseTools
	fin

	msg "Patching UDK2018 ... "
	for p in ../Patches/* ; do
		git apply "$p"||echo "$p ignored, does not apply or alread done"
	done
	fin

	msg "Building Shell.efi (OpenCoreShell.efi) ... "
	build -a X64 -b DEBUG -t XCODE5 -p ShellPkg/ShellPkg.dsc
	fin
	srce="`pwd`/Build/Shell/DEBUG_XCODE5/X64"; dest="$BASE_DIR/extras"
	mkdir -p $dest && cp $srce/Shell.efi $_
}

build_kext() {
	mkdir -p $RES_DIR/Kext_builds && cd $_
	clone "${res_list[$1+1]}"
	cd $pkg_name
	if [ "`git rev-parse HEAD`" != "`cat gitStat$AUDK_CONFIG`" ]; then
		msg "Building $pkg_name ... "
		if [ "$pkg_name" = "Lilu" ]; then
			if [ "`git rev-parse HEAD`" != "`cat gitStatDEBUG`" ]; then
				echo -e -n "DEBUG ... " >$(tty)
				xcodebuild -config Debug build #special case, always build DEBUG lilu
				git rev-parse HEAD > gitStatDEBUG
				fin; msg "Building Lilu ... RELEASE ... "
			fi
		else
			if [ -d "Lilu.kext" ]; then #remove Lilu from repos that contain it
				rm -rf Lilu.kext
			fi
			if [ ! -L "Lilu.kext" ]; then #link to acidanthera/Lilu debug version
				ln -s $RES_DIR/Kext_builds/Lilu/build/Debug/Lilu.kext .
			fi
		fi
		xcodebuild -config $XCODE_CONFIG build
		git rev-parse HEAD > gitStat$AUDK_CONFIG
		if [ -d "build/Products" ]; then #copy Products contents back to build level
			cp -r build/Products/* build
		fi
		fin
	fi
}

build_driver() {
	cd $RES_DIR/UDK
	clone "${res_list[$1+1]}"
	if [[ ! " ${built[@]} " =~ " ${pkg_name} " ]]; then
		cd $pkg_name
		if [ -f "$pkg_name.dsc" ]; then
			if [ "`git rev-parse HEAD`" != "`cat gitStat$AUDK_CONFIG`" ]; then
				if [ "$BASE_TOOLS" == "unbuilt" ]; then
					msg "Making base tools ... "
					cd ..
					source edksetup.sh --reconfig
					make -C BaseTools; fin
					cd $pkg_name
					BASE_TOOLS="built"
				fi
				cd ..
				msg "Building $pkg_name ... "
				build -a X64 -b $AUDK_CONFIG -t XCODE5 -p $pkg_name/$pkg_name.dsc
				cd $pkg_name
				git rev-parse HEAD > gitStat$AUDK_CONFIG
				fin
			fi
		fi
		built+=("$pkg_name")
	fi
}


build_resources() {
	msg "\n${GREEN}Building resources${NC}\n"
	mkdir -p $BASE_DIR/resources && cd $_
	built=()

	clone "https://github.com/acidanthera/audk UDK"

	for (( i = 0; i < ${#res_list[@]} ; i+=4 )); do
		if [ "${res_list[i+2]}" == "" ]; then
		case `echo ${res_list[i]}|rev|cut -f 1 -d .|rev` in
			"base" | "efi" )
				if [ "${res_list[i]}" == "Shell.efi" ]; then #special case
					build_shell_tool #store Shell.efi in extras folder for now
					res_list[i+2]=$dest
				else
					build_driver "$i"
					res_list[i+2]="$RES_DIR/UDK/Build/$pkg_name/$AUDK_BUILD_DIR/X64"
				fi
				;;
			"kext" )
				build_kext "$i"
				res_list[i+2]="$RES_DIR/Kext_builds/$pkg_name/build/$XCODE_CONFIG"
				;;
		esac
	fi
	done
	echo -e "" >$(tty)
}

copy_resources() {
	msg "\n${GREEN}Moving resources into place${NC}\n"
	for (( i = 0; i < ${#res_list[@]} ; i+=4 )); do
		dest=${res_list[i+3]}
		if [ "$dest" != "" ]; then
			res_name=${res_list[i]}
			srce=${res_list[i+2]}
			msg "Copying $res_name to $dest ... "
			mkdir -p $BUILD_DIR/$dest && cp -r $srce/$res_name $_
			fin
		fi
	done
}

config_changed() {
	cp $RES_DIR/UDK/OpenCorePkg/Docs/Sample.plist $BASE_DIR/Docs/Sample.plist
	cp $RES_DIR/UDK/OpenCorePkg/Docs/SampleFull.plist $BASE_DIR/Docs/SampleFull.plist
	msg "\n${YELLOW}WARNING:${NC} Sample$1.plist has been updated\n${YELLOW}!!!${NC} Make sure $BASE_DIR/$CONFIG_PLIST is up to date${NC}.\nRun the tool again if you make any changes.\n"
	cfg_ok="false"
}


check_if_Sample_plist_updated() {
	cfg_ok="true"
	msg "\nChecking if config.plist format has changed ... "
	cmp --silent $RES_DIR/UDK/OpenCorePkg/Docs/Sample.plist $BASE_DIR/Docs/Sample.plist||config_changed
	cmp --silent $RES_DIR/UDK/OpenCorePkg/Docs/SampleFull.plist $BASE_DIR/Docs/SampleFull.plist||config_changed "Full"
	if [ "$cfg_ok" == "true" ]; then
		fin
	fi
}

build_vault() {
	use_vault=`/usr/libexec/PlistBuddy -c "print :Misc:Security:RequireVault" $BASE_DIR/$CONFIG_PLIST`||use_vault="false"
	if [ "$use_vault" == "true" ]; then
		msg "\nBuilding vault files for $BUILD_DIR ... "
		cd $BUILD_DIR/OC
		if ls vault* 1> /dev/null 2>&1; then
			rm vault.*
		fi
		$RES_DIR/UDK/OcSupportPkg/Utilities/CreateVault/create_vault.sh .
		make -C $RES_DIR/UDK/OcSupportPkg/Utilities/RsaTool
		$RES_DIR/UDK/OcSupportPkg/Utilities/RsaTool/RsaTool -sign vault.plist vault.sig vault.pub
		off=$(($(strings -a -t d OpenCore.efi | grep "=BEGIN OC VAULT=" | cut -f1 -d' ')+16))
		dd of=OpenCore.efi if=vault.pub bs=1 seek=$off count=520 conv=notrunc
		rm vault.pub
		fin
	fi
}

res_not_found() {
	msg "\n${RED}ERROR:${NC} $1 - repo was not found in Docs/repo.plist\n\t$1 file not found in extras directory\n\tPlace $1 file in extras directory to continue\n"
}

add_drivers_res_list() {
	count=0
	Driver="start"
	while [ "$Driver" != "" ]
	do
		Driver=`/usr/libexec/PlistBuddy -c "print :UEFI:Drivers:$count" $BASE_DIR/$CONFIG_PLIST`||Driver=""
		if [ "$Driver" != "" ]; then
			git_url=`/usr/libexec/PlistBuddy -c "print :$Driver" $BASE_DIR/Docs/repo.plist`||git_url=""
			if [ "$git_url" != "" ]; then
				res_list+=("$Driver" "$git_url" "" "OC/Drivers")
			elif [ -f "$BASE_DIR/extras/$Driver" ]; then
				res_list+=("$Driver" "" "$BASE_DIR/extras" "OC/Drivers")
			else
				res_not_found "$Driver"
				exit 1
			fi
		fi
		let "count += 1"
	done
}

add_kexts_res_list() {
	count=0
	BundlePath="start"
	while [ "$BundlePath" != "" ]
	do
		BundlePath=`/usr/libexec/PlistBuddy -c "print :Kernel:Add:$count:BundlePath" $BASE_DIR/$CONFIG_PLIST`||BundlePath=""
		Enabled=`/usr/libexec/PlistBuddy -c "print :Kernel:Add:$count:Enabled" $BASE_DIR/$CONFIG_PLIST`||Enabled=""
		if [ "$Enabled" == "true" ]; then
			git_url=`/usr/libexec/PlistBuddy -c "print :$BundlePath" $BASE_DIR/Docs/repo.plist`||git_url=""
			if [ "$git_url" != "" ]; then
				res_list+=("$BundlePath" "$git_url" "" "OC/Kexts")
			elif [ -d "$BASE_DIR/extras/$BundlePath" ]; then
				res_list+=("$BundlePath" "" "$BASE_DIR/extras" "OC/Kexts")
			else
				res_not_found "$BundlePath"
				exit 1
			fi
		fi
		let "count += 1"
	done
}

add_tools_res_list() {
	count=0
	Path="start"
	while [ "$Path" != "" ]
	do
		Path=`/usr/libexec/PlistBuddy -c "print :Misc:Tools:$count:Path" $BASE_DIR/$CONFIG_PLIST`||Path=""
		Enabled=`/usr/libexec/PlistBuddy -c "print :Misc:Tools:$count:Enabled" $BASE_DIR/$CONFIG_PLIST`||Enabled=""
		if [ "$Enabled" == "true" ]; then
			git_url=`/usr/libexec/PlistBuddy -c "print :$Path" $BASE_DIR/Docs/repo.plist`||git_url=""
			if [ "$git_url" != "" ]; then
				res_list+=("$Path" "$git_url" "" "OC/Tools")
			elif [ -f "$BASE_DIR/extras/$Path" ]; then
					res_list+=("$Path" "" "$BASE_DIR/extras" "OC/Tools")
			else
				res_not_found "$Path"
				exit 1
			fi
		fi
		let "count += 1"
	done
}

build_all_repos() {
	count=0
	Repos=`/usr/libexec/PlistBuddy -c "print" $BASE_DIR/Docs/repo.plist`||Repos=""
	if [ "$Repos" != "" ]; then
		items=`awk -F" = " '
		{
			if ($0 ~ /[{}]/){}
			else{printf $1","}
		}' <<< "${Repos}"|tr -d ' '`

		IFS=',' read -ra array <<< "$items"

		init_res_list
		res_list+=("Lilu.kext" "https://github.com/acidanthera/Lilu" "" "") #add Lilu before other kexts

		for element in "${array[@]}"
		do
			git_url=`/usr/libexec/PlistBuddy -c "print :$element" $BASE_DIR/Docs/repo.plist`||git_url=""
			if [ "$element" != "Lilu.kext" ]; then #Lilu alread added first
				res_list+=("$element" "$git_url" "" "")
			fi
		done
		build_resources
		exit 0
	else
		msg "${RED}ERROR:${NC} Docs/repo.plist not found or invalid format\n"
		exit 1
	fi
}

set_build_type() {
	case $ARG2 in
		d?(ebug) )
			XCODE_CONFIG="Debug"
			;;
		r?(elease) )
			XCODE_CONFIG="Release"
			;;
		*)
			echo -e "need to specify \033[4mdebug\033[0m or \033[4mrelease\033[0m after $ARG1 command" >$(tty)
			exit 1
			;;
	esac
	AUDK_CONFIG=`echo $XCODE_CONFIG|tr a-z A-Z`
	BUILD_DIR="$BASE_DIR/$AUDK_CONFIG/EFI"
	CONFIG_PLIST="$AUDK_CONFIG/config.plist"
	AUDK_BUILD_DIR="${AUDK_CONFIG}_XCODE5"
	echo -e "\n${GREEN}Setting up ${YELLOW}$AUDK_CONFIG${GREEN} environment${NC}" >$(tty)
}


#****** Start build ***************
exec 6>&1 #start logging
exec > $LOGFILE
exec 2>&1

case $ARG1 in
	b?(uild) ) #build first if repo exists, else copy from extras folder
		set_build_type
		;;
	c?(opy) ) #copy from extras first if exists, else build from repo
		msg "\n${YELLOW}copy mode not implemented yet${NC}\n"
		exit 0
		;;
	d?(ebug)|r?(elease) )
		if [ "$BUILD_ALL" == "true" ]; then
			ARG2=$ARG1
			set_build_type
			build_all_repos
			exit 0
		else
			echo -e "${YELLOW}Usage:${NC} must specify \033[4mcommand\033[0m or \033[1m-A\033[0m before $ARG1" >$(tty)
			exit 1
		fi
		;;

	*)
		if [ "$UPDATE" == "true" ] && [ "$ARG1" == "" ]; then
			check_for_updates
			exit 0
		fi
		if [ "$BUILD_ALL" == "true" ]; then
			echo -e "${YELLOW}Usage:${NC} must specify either debug or release after -A" >$(tty)
			exit 1
		fi
		if [ "$REMOVE_ALL" == "true" ]; then
			exit 0
		fi

		echo -e `cat $BASE_DIR/Docs/usage.txt` >$(tty)
		exit 0
		;;
esac

check_requirements

init_res_list
add_drivers_res_list
add_kexts_res_list
add_tools_res_list

#print_resources

check_for_updates

build_resources

set_up_dest_dir #todo - change to tmp folder and set up dest dir only if build succeds
copy_resources #todo - copy from tmp folder?

check_if_Sample_plist_updated

build_vault #todo - before or after copy?

exec 1>&6 6>&- 2>&1 #stop logfile

msg "\n${GREEN}Finished building ${YELLOW}$BUILD_DIR${NC}\n"
